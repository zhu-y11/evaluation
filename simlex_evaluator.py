#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'ivan'
import sys, os, codecs, operator, time
reload(sys)
sys.setdefaultencoding('utf8')
import numpy as np

import scipy.stats as spst

reps = []
suffix = ""
#prefix = "hr_"
#prefix = "en_"
prefix = ""

# Parse the gold truth
def parse_gold_standard(in_dataset_file):
    gt_list = []
    data = [line.split() for line in open(in_dataset_file).read().splitlines()]

    # Scan over each item in the list and make a list of pairs vs scores
    # Skip the first (description) line
    print "Reading... " + os.path.basename(in_dataset_file)
    for item in data[1:]:
        pair = []
	prefixed_item1 = prefix+item[0]
	prefixed_item2 = prefix+item[1]
	prefixed_pair = [prefixed_item1, prefixed_item2]

        pair.append(prefixed_pair)
        pair.append(item[2])
        gt_list.append(pair)
    
    return gt_list

# Parse the input embedding file
def parse_embedding_file(in_embedding_file):

    we_dict = {}

    with open(in_embedding_file, "r") as in_file:
        lines = in_file.readlines()

    in_file.close()
    # traverse the lines and
    print 'Loading and normalizing word embeddings... ' + os.path.basename(in_embedding_file)
    # input vectors, but skip the first two lines (only numbers)
    for i in range(0,len(lines)):
        temp_list = lines[i].split()
        if temp_list[0].endswith(suffix):
            dkey = temp_list.pop(0)
            # Error with some non-standard words (dot, comma), just skip them, not necessary
            try:
                x = np.array(temp_list, dtype='double')
                norm = np.linalg.norm(x)
            except ValueError:
                continue
            we_dict[dkey] = x/norm
        else:
            continue
    print len(we_dict)
    return we_dict

# Do the actual evaluation in terms of Spearman
def evaluate_we_spearman(reps, gt_list):
    ## Prepare two lists for computing Spearman

    simlex_gold_list_all_included = []
    simlex_gold_list_with_excluded = []

    simlex_we_list_all_included = []
    simlex_we_list_with_excluded = []

    # 1. Excluding pairs for which the WE model does not have an entry
    # 2. Treating such pairs as 0 (zero similarity)

    counter_excluded = 0
    for item_gt in gt_list:
        # item_gt[0] -> word pair
        # item_gt[1] -> their score

        word1 = item_gt[0][0] + suffix
        word2 = item_gt[0][1] + suffix

        if (not word1 in reps) or (not word2 in reps):
           simlex_gold_list_all_included.append(item_gt[1])
           simlex_we_list_all_included.append(0.0)
           counter_excluded += 1
        else:
            score_pair = np.inner(reps[word1],reps[word2])

            simlex_gold_list_all_included.append(item_gt[1])
            simlex_we_list_all_included.append(score_pair)

            simlex_gold_list_with_excluded.append(item_gt[1])
            simlex_we_list_with_excluded.append(score_pair)


    #Evaluating two lists; gold and the one generated by our WE induction model
    rho_all, pvalue_all = spst.spearmanr(simlex_gold_list_all_included, simlex_we_list_all_included)

    print"\nRESULTS:\n"
    print "rho (ALL): " + round(rho_all,5).__str__()
    print "p-value (ALL): " + round(pvalue_all,11).__str__() + "\n"


    rho_ex, pvalue_ex = spst.spearmanr(simlex_gold_list_with_excluded, simlex_we_list_with_excluded)
    print "rho (EXCLUDED): " + round(rho_ex,5).__str__()
    print "p-value (EXCLUDED): " + round(pvalue_ex,11).__str__() + "\n"
    print "TOTAL PAIRS EXCLUDED: " + counter_excluded.__str__()


# Entry point for the entire program
if __name__ == '__main__':
    if len(sys.argv) != 3:
        raise ValueError('No file names specified. Usage: python %s in_dataset_file in_rep_file' % sys.argv[0])

    in_dataset_file = sys.argv[1]
    in_embedding_file = sys.argv[2]

    start = time.time()
    # Parse the input gold standard file first
    gt_dataset_list = parse_gold_standard(in_dataset_file)

    # Parse the input word embedding file
    reps = parse_embedding_file(in_embedding_file)

    # Do the evaluation of the learned representations
    evaluate_we_spearman(reps, gt_dataset_list)
    end = time.time()
    print "\nEvaluation time: " + round((end-start),3).__str__() + "s"
